{
  "Logging": {
    "IncludeScopes": false,
    "Debug": {
      "LogLevel": {
        "Default": "Warning"
      }
    },
    "Console": {
      "LogLevel": {
        "Default": "Warning"
      }
    }
  },
  // Exceptional Settings:
  // ALL SETTINGS ARE OPTIONAL, this is just a complete listing. 
  // ApplicationName could be defined here, or could be set in your Startup Configure() method.
  "Exceptional": {
    "ApplicationName": "Samples (ASP.NET Core)",
    // "DataIncludePattern": "MyPrefix.*", // Exception.Data[] keys matching this regex pattern are logged
    // Email settings to send to, if an email per exception is desired, only toAddress is required, other defaults are pulled from the <system.net> section
    //"Email": {
    //"ToAddress": "tester@example.com", // REQUIRED If you want to send mail, or else who are we sending it to?
    //"FromAddress": "exceptions@test.com",
    //"FromDisplayName": "Wendy",
    //"SMTPHost": "localhost",
    //"SMTPPort": 25,
    //"SMTPUsername": "dummy",
    //"SMTPPassword": "pwd",
    //"SMTPEnableSSL": true,
    //"PreventDuplicates": true
    //},
    // Logfilters are a list of key value pairs. The key describes the property of either the cookie
    // or the form that should be replaced with the given value. For example if you send passwords via
    // form you can replace them with a sequence of *. An example for cookies would be to replace
    // the authtoken cookie with some text.
    "LogFilters": {
      "Cookies": {
        "authToken": "**no tokens saved! pheww**"
      },
      "Form": {
        "password": "*********"
      }
    },
    // Error messages to ignore depending on type or regexpattern
    "IgnoreErrors": {
      // List of regex patterns. Exceptions with messages matching one of these patterns aren't logged
      "Regexes": [
        "Request timed out\\.$",
        "Top SECRET DATA\\.$"
      ],
      // List of errortypes. Exceptions with matching types aren't logged
      "Types": [
        "MyNameSpace.MyException",
        "MyNameSpace.NoLogPleaseException"
      ]
    },
    //Which ErrorStore to use, if no element is declared here a Memory store with defaults will be used
    //"ErrorStore": {
    //  "Type": "Memory"
      //"RollupSeconds": 600, // (Optional - default 600 seconds), determines how long the window is to roll up exceptions with the same stack trace - 0 to not roll up
      //"BackupQueueSize": 100 // (Optional - default 1000), determines how many errors to cache (excluding roll-ups) in memory when logging fails...every 2 seconds we'll retry logging and flush these out to the final store
    //}

    // JSON
    // "ErrorStore": {
    //   "Type": "JSON",
    //   "Path": "/errors", //For file-based error stores. The path to use on for file storage.
    //   "Size": 200 //size defaults to 200, this is how many files are kept before the oldest error is removed
    // }

    // For SQL Errorstore a connection string is needed, many applications can log to the same place as long as they have unique names (otherwise we can't tell them apart).
    "ErrorStore": {
      "Type": "SQL",
      "ConnectionString": "Server=(LocalDb)\\MSSQLLocalDB;Database=Exceptions;Trusted_Connection=True;MultipleActiveResultSets=true",
      "Schema": "HC"
    }

    // You can also use a MySQL Database with the MySQL ErorrStore
    // "ErrorStore": {
    //   "Type": "MySQL",
    //   "ConnectionString": "Server=.;Database=Exceptions;Username=Exceptions;Pwd=myPassword!"
    // }
  }
}