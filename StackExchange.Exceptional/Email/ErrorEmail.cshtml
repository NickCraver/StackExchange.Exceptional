@* Generator: Template TypeVisibility: Internal *@
@using System
@using System.Collections.Generic
@using System.Collections.Specialized
@using System.Linq
@using System.Text
@using System.Text.RegularExpressions
@using System.Web
@using StackExchange.Exceptional
@using StackExchange.Exceptional.Pages
@using StackExchange.Exceptional.Extensions
@inherits RazorPageBase
@{
}
@functions
{
    public Error error { get; set; }
    private static HashSet<string> hiddenHttpKeys = new HashSet<string>
                                                        {
                                                            "ALL_HTTP",
                                                            "ALL_RAW",
                                                            "HTTP_CONTENT_LENGTH",
                                                            "HTTP_CONTENT_TYPE",
                                                            "HTTP_COOKIE",
                                                            "QUERY_STRING"
                                                        };

    private static HashSet<string> defaultHttpKeys = new HashSet<string>
                                                     {
                                                         "APPL_MD_PATH",
                                                         "APPL_PHYSICAL_PATH",
                                                         "GATEWAY_INTERFACE",
                                                         "HTTP_ACCEPT",
                                                         "HTTP_ACCEPT_CHARSET",
                                                         "HTTP_ACCEPT_ENCODING",
                                                         "HTTP_ACCEPT_LANGUAGE",
                                                         "HTTP_CONNECTION",
                                                         "HTTP_HOST",
                                                         "HTTP_KEEP_ALIVE",
                                                         "HTTPS",
                                                         "INSTANCE_ID",
                                                         "INSTANCE_META_PATH",
                                                         "PATH_INFO",
                                                         "PATH_TRANSLATED",
                                                         "REMOTE_PORT",
                                                         "SCRIPT_NAME",
                                                         "SERVER_NAME",
                                                         "SERVER_PORT",
                                                         "SERVER_PORT_SECURE",
                                                         "SERVER_PROTOCOL",
                                                         "SERVER_SOFTWARE"
                                                     };

    public IHtmlString RenderVariableTable(string title, string className, NameValueCollection vars)
    {
        if (vars == null || vars.Count == 0) return Html("");
        var result = new StringBuilder();

        var fetchError = vars[Error.CollectionErrorKey];
        var errored = fetchError.HasValue();
        var keys = vars.AllKeys.Where(key => !hiddenHttpKeys.Contains(key) && key != Error.CollectionErrorKey).OrderBy(k => k);

        result.AppendFormat("    <div>").AppendLine();
        result.AppendFormat("        <h3 style=\"color: #224C00; font-family: Verdana, Tahoma, Arial, 'Helvetica Neue', Helvetica, sans-serif; font-size: 14px; margin: 10px 0 5px 0;\">{0}{1}</h3>", title, errored ? " - Error while gathering data" : "").AppendLine();
        if(keys.Any())
        {
            result.AppendFormat("        <table style=\"font-family: Verdana, Tahoma, Arial, 'Helvetica Neue', Helvetica, sans-serif; font-size: 12px; width: 100%; border-collapse: collapse; border: 0;\">").AppendLine();
            var i = 0;
            foreach (var k in keys)
            {
                // If this has no value, skip it
                if (vars[k].IsNullOrEmpty() || defaultHttpKeys.Contains(k))
                {
                    continue;
                }
                result.AppendFormat("          <tr{2}><td style=\"padding: 0.4em; width: 200px;\">{0}</td><td style=\"padding: 0.4em;\">{1}</td></tr>", k, Linkify(vars[k]), i % 2 == 0 ? " style=\"background-color: #F2F2F2;\"" : "").AppendLine();
                i++;
            }
            if (vars["HTTP_HOST"].HasValue() && vars["URL"].HasValue())
            {
                var url = string.Format("http://{0}{1}{2}", vars["HTTP_HOST"], vars["URL"], vars["QUERY_STRING"].HasValue() ? "?" + vars["QUERY_STRING"] : "");
                result.AppendFormat("          <tr><td style=\"padding: 0.4em; width: 200px;\">URL and Query</td><td style=\"padding: 0.4em;\">{0}</td></tr>", vars["REQUEST_METHOD"] == "GET" ? Linkify(url).ToString() : Server.HtmlEncode(url)).AppendLine();
            }
            result.AppendFormat("        </table>").AppendLine();
        }
        if(errored)
        {
            result.AppendFormat("        <span style=\"color: maroon;\">Get {0} threw an exception:</span>", title).AppendLine();
            result.AppendFormat("        <pre  style=\"background-color: #EEE; font-family: Consolas, Monaco, monospace; padding: 8px;\">{0}</pre>", Server.HtmlEncode(fetchError)).AppendLine();
        }
        result.AppendFormat("    </div>").AppendLine();
        return Html(result.ToString());
    }


    private IHtmlString Linkify(string s)
    {
        if (Regex.IsMatch(s, @"%[A-Z0-9][A-Z0-9]"))
        {
            s = Server.UrlDecode(s);
        }

        if (Regex.IsMatch(s, "^(https?|ftp|file)://"))
        {
            //@* || (Regex.IsMatch(s, "/[^ /,]+/") && !s.Contains("/LM"))*@ // block special case of "/LM/W3SVC/1"
            var sane = SanitizeUrl(s);
            if (sane == s) // only link if it's not suspicious
                return Html(string.Format(@"<a style=""color: #3D85B0;"" href=""{0}"">{1}</a>", sane, Server.HtmlEncode(s)));
        }

        return Html(Server.HtmlEncode(s));
    }

    private static readonly Regex _sanitizeUrl = new Regex(@"[^-a-z0-9+&@#/%?=~_|!:,.;\(\)\{\}]", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    public static string SanitizeUrl(string url)
    {
        return url.IsNullOrEmpty() ? url : _sanitizeUrl.Replace(url, "");
    }

}
<div style="font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;">
@if (error == null)
{
    <h1 style="color: maroon; font-size: 16px;">Error not found.</h1>
}
else
{
    <h1 style="color: maroon; font-size: 16px; padding: 0; margin: 0;">@error.Message</h1>
    <div style="font-size: 12px; color: #444; padding: 0; margin: 2px 0;">@error.Type</div>
    <pre style="background-color: #FFFFCC; font-family: Consolas, Monaco, monospace; font-size: 12px; margin: 2px 0; padding: 12px;">@error.Detail
    </pre>
    <p class="error-time" style="font-size: 13px; color: #555; margin: 5px 0;">occurred at <b title="@error.CreationDate.ToLongDateString() at @error.CreationDate.ToLongTimeString()">@error.CreationDate.ToUniversalTime() UTC</b> on @error.MachineName</p>
    if (!string.IsNullOrEmpty(error.SQL))
    {
        <h3 style="color: #224C00; font-family: Verdana, Tahoma, Arial, 'Helvetica Neue', Helvetica, sans-serif; font-size: 14px; margin: 10px 0 5px 0;">SQL</h3>
        <pre style="background-color: #EEE; font-family: Consolas, Monaco, monospace; padding: 8px 8px 8px 8px; margin: 2px 0;">@error.SQL</pre>
        <br/>
    }
    @RenderVariableTable("Server Variables", "server-variables", error.ServerVariables)
    if (error.CustomData != null && error.CustomData.Count > 0)
    {
        var errored = error.CustomData.ContainsKey(ErrorStore.CustomDataErrorKey);
        var cdKeys = error.CustomData.Keys.Where(k => k != ErrorStore.CustomDataErrorKey);
        <div class="custom-data">
            @if (errored)
            {
                <h3 style="color: maroon; font-family: Verdana, Tahoma, Arial, 'Helvetica Neue', Helvetica, sans-serif; font-size: 14px; margin: 10px 0 5px 0;">Custom - Error while gathering custom data</h3>
            } else
            {
                <h3 style="color: #224C00; font-family: Verdana, Tahoma, Arial, 'Helvetica Neue', Helvetica, sans-serif; font-size: 14px; margin: 10px 0 5px 0;">Custom</h3>
            }
            @if(cdKeys.Any(k => k != ErrorStore.CustomDataErrorKey))
            {
                var i = -1;
                <table style="font-family: Verdana, Tahoma, Arial, 'Helvetica Neue', Helvetica, sans-serif; font-size: 12px; width: 100%; border-collapse: collapse; border: 0;">
                    @foreach (var cd in cdKeys)
                    {
                        i++;
                        <tr@Html(i % 2 == 0 ? " style=\"background-color: #F2F2F2;\"" : "")>
                            <td style="padding: 0.4em; width: 200px;">@cd</td>
                            <td style="padding: 0.4em;">@Linkify(error.CustomData[cd])</td>
                        </tr>
                    }
                </table>
            }
            @if(errored)
            {
                <span style="color: maroon;">GetCustomData threw an exception:</span>
                <pre style="background-color: #EEE; font-family: Consolas, Monaco, monospace; padding: 8px;">@error.CustomData[ErrorStore.CustomDataErrorKey]</pre>
            }
        </div>
    }
    @RenderVariableTable("QueryString", "querystring", error.QueryString)
    @RenderVariableTable("Form", "form", error.Form)
    @RenderVariableTable("Cookies", "cookies", error.Cookies)
}
</div>